<!DOCTYPE html>
<html>
    <head>
        <title>PomoQuest</title>
        <link rel="stylesheet" href="../css/mvp.css">
    </head>
    <body>
        <script src="../scripts/html_tools.js"></script>
        <script>
            const rateOfAdvancement = 0.07;
            const levelUpDifficulty = 2;
            const xpToLevel = (xp) => {
                switch (levelUpDifficulty) {
                    case 2:
                        return Math.floor(rateOfAdvancement * Math.sqrt(xp));
                    
                    case 3:
                        return Math.floor(rateOfAdvancement * Math.cbrt(xp));
                    
                    default:
                        return Math.floor(rateOfAdvancement * Math.pow(xp, 1/levelUpDifficulty));
                }
            };

            const levelToXp = (level) => {
                return Math.ceil(Math.pow(level / rateOfAdvancement, levelUpDifficulty));
            };

            const getRelativeXpReport = (xp) => {
                const level = xpToLevel(xp);
                const baseLevelXp = levelToXp(level);
                const nextLevelXp = levelToXp(level + 1);
                return {
                    value: xp - baseLevelXp,
                    max: nextLevelXp - baseLevelXp,
                };
            };

            const getHealthMax = (xp) => {
                const level = xpToLevel(xp);
                return 90 + (level * 10);
            };

            const levelOneXp = levelToXp(1);

            const themeColors = {
                progressBarBackground: `rgba(0,0,0,.25)`,
                progressBarForeground: `rgba(255,255,255,.75)`,
            };

            const stateKeys = {
                workPeriod: `workPeriod`,
                restPeriod: `restPeriod`,
                inventory: `inventory`,
                currentHealth: `currentHealth`,
            };

            const defaultValues = {
                workPeriod: 45 * 60,
                restPeriod: 15 * 60,
                inventory: [],
                currentHealth: getHealthMax(levelOneXp),
            };

            const skills = {
                strength: {
                    keyValue: `strength`,
                    displayValue: `Strength`,
                },
                toolUse: {
                    keyValue: `toolUse`,
                    displayValue: `Tool Use`,
                },
                fire: {
                    keyValue: `fire`,
                    displayValue: `Fire`,
                },
                combat: {
                    keyValue: `combat`,
                    displayValue: `Combat`,
                },
                health: {
                    keyValue: `health`,
                    displayValue: `Health`,
                },
                intelligence: {
                    keyValue: `intelligence`,
                    displayValue: `Intelligence`,
                },
                navigation: {
                    keyValue: `navigation`,
                    displayValue: `Navigation`,
                },
            };

            for (const n in skills) {
                const xpKey = skills[n].keyValue + `Xp`;
                skills[n].xpKey = xpKey;
                stateKeys[xpKey] = xpKey;
                defaultValues[xpKey] = levelOneXp;
            }

            const itemTypes = {
                rawFood: `Raw Food`, //<- required for cooking, for example
                axe: `Axe`, //<- required for wood chopping (can be a weapon for dungeon crawling too, bonus for two weapon types?)
                sword: `Sword`, //<- required for dungeon crawling
                fishingPole: `Fishing Pole`, //<- required for fishing
                flintAndSteel: `Flint and Steel`, //<- required for cooking
                bowAndArrow: `Bow and Arrow`, //<- required for hunting (can be a weapon for dungeon crawling too, bonus for two weapon types?)
                wood: `Wood`, //<- required for cooking
            };

            //These are the activities a player can do during sessions.
            //Each one should appropriate XP toward a set of associated skills.
            //TODO: doesn't actually define how the XP should be divided between the skills.
            //TODO: each one has requirements, levels, etc.
            //Requirements searches the inventory for required materials/tools.
            //Make activities a class (regional and global activities, exploration and cooking are global, hunting fishing etc. are regional)
            //The required skill levels (and maybe items) are dependent on the region.
            //Exploration has a chance to reveal a new region (procedurally generated).
            //Each new region contributes 1-5% toward total world exploration. Ensure procedural generation includes a minimum of one of each kind of biome.
            //Possible to discover regions that are much higher than current level (5-10 levels higher maybe more?).
            //While exploring might encounter baddies.
            //Additional activities/skills for the future could include crafting and building, but that is getting into stretch goal territory. Watch the scope!
            const activities = {
                woodChopping: {
                    skills: [skills.toolUse, skills.strength],
                },
                fishing: {
                    skills: [skills.intelligence, skills.toolUse],
                },
                hunting: {
                    skills: [skills.combat, skills.intelligence],
                },
                dungeonCrawling: {
                    skills: [skills.strength, skills.combat, skills.health, skills.intelligence],
                },
                cooking: {
                    skills: [skills.toolUse, skills.fire, skills.intelligence],
                },
                exploration: {
                    skills: [skills.exploration, skills.intelligence, skills.fire, skills.toolUse, skills.combat],
                },
            };

            function StateManager() {
                const stateKey = `PomoQuestState`;
                const myState = localStorage.hasOwnProperty(stateKey)
                    ? JSON.parse(localStorage[stateKey])
                    : {};

                const save = () => {
                    localStorage[stateKey] = JSON.stringify(myState);
                };

                this.get = (key) => {
                    if (!myState.hasOwnProperty(key)) {
                        this.set(key, defaultValues.hasOwnProperty(key) ? defaultValues[key] : null);
                    }
                    return myState[key];
                };

                this.set = (key, value) => {
                    myState[key] = value;
                    save();
                };
            }

            const state = new StateManager();

            function ScreenManager(state) {
                //TODO:
            }

            function ProgressBar(parent, width, height) {
                const borderRadius = '5';
                const barContainer = createElement('div', { 'style': `background-color: ${themeColors.progressBarBackground}; border: 1px solid black; border-radius: ${borderRadius}px; width: ${width}px; height: ${height}px;` }, null);
                const bar = createElement('div', { 'style': `border-radius: ${borderRadius}px; text-align: center; background-color: ${themeColors.progressBarForeground}; height:100%; width:50%` }, null);
                barContainer.appendChild(bar);
                parent.appendChild(barContainer);
                
                this.update = (data) => {
                    bar.style.width = `${Math.floor((Math.min(data.value, data.max)/data.max) * 100)}%`;
                };
            }
        </script>
    </body>
</html>